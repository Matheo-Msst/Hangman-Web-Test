package fonctions

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"
	"unicode"
)

// Liste globale des mots
var Mots []string

// Liste des lettres et mots d√©j√† tent√©s
var lettresTentees []string
var motsTentes []string

// Fonction principale qui orchestre toutes les √©tapes du jeu
func Jouer() {
	vies := 10
	mot := ObtenirMotAleatoire()
	motCache := GenererTirets(mot)

	// Boucle principale du jeu
	for {
		// Affichage de l'√©tat du jeu avant chaque tour
		afficherEtatJeu(vies, motCache)

		// Affichage des lettres et mots d√©j√† tent√©s
		fmt.Println("Lettres d√©j√† tent√©es :", strings.Join(lettresTentees, ", "))
		fmt.Println("Mots d√©j√† tent√©s :", strings.Join(motsTentes, ", "))

		// Demander une lettre ou un mot (en passant vies et motCache)
		utilisateur := DemanderLettre()

		// La fonction "TraiterChaine" redemande l'entr√©e si elle n'est pas correcte
		utilisateur = TraiterChaine(utilisateur, vies, motCache)

		// Si l'entr√©e est valide, on v√©rifie la lettre ou le mot
		if len(utilisateur) > 1 {
			VerifierMot(mot, motCache, utilisateur, &vies)
		} else {
			VerifierUneLettre(mot, motCache, utilisateur, &vies)
		}

		// Mise √† jour et affichage du mot cach√© √† chaque tour
		MettreAJourMotCache(motCache) // Afficher le mot cach√© mis √† jour

		// V√©rification de l'√©tat de la partie
		resultat := PartieTerminee(mot, motCache, vies)
		if resultat == 666 {
			// Partie perdue
			fmt.Println("üíÄ Vous avez perdu !")
			break
		} else if resultat == 777 {
			// Partie gagn√©e
			fmt.Println("üéâ Vous avez gagn√© !")
			break
		}
	}
}

// Affiche l'√©tat du jeu (vies, mot cach√© et l'√©tat du pendu)
func afficherEtatJeu(vies int, motCache []string) {
	// Affichage des vies restantes et du mot cach√©
	fmt.Printf("\n‚ù§Ô∏è Vies : %d, Mot : %s\n", vies, MettreAJourMotCache(motCache))
	// Affichage de l'√©tat actuel du pendu
	fmt.Println(RenvoieBonhomme(vies))
}

// Obtenir un mot al√©atoire √† partir du fichier
func ObtenirMotAleatoire() string {
	// Obtient le r√©pertoire de travail actuel
	workingDir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	// Concat√®ne le r√©pertoire relatif de words.txt
	filePath := filepath.Join(workingDir, "hangman-classic", "fonctions", "words.txt")

	// Ouvre le fichier
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		mot := scanner.Text()
		if mot != "" {
			// Si le mot n'est pas vide, on l'ajoute √† Mots
			Mots = append(Mots, mot)
		}
	}

	if len(Mots) == 0 {
		log.Fatal("Le fichier 'words.txt' est vide ou ne contient pas de mots valides.")
	}

	// Choisir un mot al√©atoire
	rand.Seed(time.Now().UnixNano())
	selectedWord := Mots[rand.Intn(len(Mots))]
	return selectedWord
}

// G√©n√©rer les tirets pour le mot cach√©
func GenererTirets(mot string) []string {
	motCache := make([]string, len(mot))
	for i := range motCache {
		motCache[i] = "_"
	}
	return motCache
}

// Demander une lettre ou un mot √† l'utilisateur
func DemanderLettre() string {
	fmt.Print("\nEntrez une lettre ou un mot : ")
	return obtenirEntree()
}

func VerifierUneLettre(mot string, motCache []string, lettre string, vies *int) {
	if len(mot) == 0 {
		log.Fatal("Erreur: le mot √† deviner est vide !")
	}

	if len(motCache) == 0 {
		log.Fatal("Erreur: le mot cach√© est vide !")
	}

	// Exemple de traitement
	if strings.Contains(mot, lettre) {
		fmt.Printf("‚úÖ La lettre '%s' est dans le mot.\n", lettre)
	} else {
		fmt.Printf("‚ùå La lettre '%s' n'est pas dans le mot.\n", lettre)
		*vies--
	}
}

// V√©rifier si le mot propos√© est correct
func VerifierMot(mot string, motCache []string, utilisateur string, vies *int) {
	if Doublons(motsTentes, utilisateur) {
		fmt.Println("‚õî Vous avez d√©j√† tent√© ce mot. Essayez un autre.")
		return
	}

	motsTentes = append(motsTentes, utilisateur)

	if utilisateur != mot {
		perteVies := len(utilisateur)
		*vies -= perteVies
		if *vies < 0 {
			*vies = 0 // Emp√™che les vies de devenir n√©gatives
		}
		fmt.Printf("‚ùå %s n'est pas le bon mot ! Vous perdez %d vies.\n", utilisateur, perteVies)
	} else {
		copy(motCache, strings.Split(mot, ""))
		fmt.Printf("‚úÖ Le mot '%s' est correct !\n", utilisateur)
	}
}

// V√©rifie si la partie est termin√©e et renvoie un code de fin de partie (666 = perdu, 777 = gagn√©, 0 = continue)
func PartieTerminee(mot string, motCache []string, vies int) int {
	if vies <= 0 {
		fmt.Printf("\nüíÄ Vous avez perdu ! Le mot √©tait : %s\n", mot)
		return 666 // Partie perdue
	} else if strings.Join(motCache, "") == mot {
		fmt.Printf("\nüéâ Bravo ! Vous avez trouv√© le mot : %s\n", mot)
		return 777 // Partie gagn√©e
	}
	return 0 // La partie continue
}

// V√©rifie si le caract√®re est une lettre valide (A-Z ou a-z)
func EstRuneValide(r rune) bool {
	return (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z')
}

// Traite la cha√Æne en acceptant uniquement les lettres de A √† Z
func TraiterChaine(input string, vies int, motCache []string) string {
	var resultat []rune
	for _, r := range input {
		if !EstRuneValide(r) {
			fmt.Println("‚õî Veuillez saisir uniquement des lettres de A √† Z (pas d'accents, chiffres ou symboles).")
			return DemanderLettre() // Demande une nouvelle entr√©e
		}
		resultat = append(resultat, unicode.ToLower(r))
	}
	return string(resultat)
}

// Fonction pour v√©rifier si une valeur est pr√©sente dans une liste
func Doublons(liste []string, element string) bool {
	for _, item := range liste {
		if item == element {
			return true
		}
	}
	return false
}

// Obtient l'entr√©e de l'utilisateur
func obtenirEntree() string {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	return scanner.Text()
}

// MettreAJourMotCache prend un tableau de string et renvoie une version string
func MettreAJourMotCache(motCache []string) string {
	// Utilise strings.Join pour assembler les √©l√©ments du tableau en une seule cha√Æne
	motCacheString := strings.Join(motCache, " ")
	return motCacheString
}
